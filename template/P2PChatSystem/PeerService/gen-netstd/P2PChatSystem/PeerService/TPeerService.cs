/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace P2PChatSystem.PeerService
{
  public partial class TPeerService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<bool> sendMessage(string @username, string @message, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> updatePeers(List<global::P2PChatSystem.Model.TPeer> @peers, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> sendMessage(string @username, string @message, CancellationToken cancellationToken = default)
      {
        await send_sendMessage(@username, @message, cancellationToken);
        return await recv_sendMessage(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_sendMessage(string @username, string @message, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("sendMessage", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp0 = new InternalStructs.sendMessage_args() {
          Username = @username,
          Message = @message,
        };
        
        await tmp0.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_sendMessage(CancellationToken cancellationToken = default)
      {
        
        var tmp1 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1.Type == TMessageType.Exception)
        {
          var tmp2 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2;
        }

        var tmp3 = new InternalStructs.sendMessage_result();
        await tmp3.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3.__isset.success)
        {
          return tmp3.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessage failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> updatePeers(List<global::P2PChatSystem.Model.TPeer> @peers, CancellationToken cancellationToken = default)
      {
        await send_updatePeers(@peers, cancellationToken);
        return await recv_updatePeers(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_updatePeers(List<global::P2PChatSystem.Model.TPeer> @peers, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("updatePeers", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp4 = new InternalStructs.updatePeers_args() {
          Peers = @peers,
        };
        
        await tmp4.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_updatePeers(CancellationToken cancellationToken = default)
      {
        
        var tmp5 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp5.Type == TMessageType.Exception)
        {
          var tmp6 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp6;
        }

        var tmp7 = new InternalStructs.updatePeers_result();
        await tmp7.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp7.__isset.success)
        {
          return tmp7.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updatePeers failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["sendMessage"] = sendMessage_ProcessAsync;
        processMap_["updatePeers"] = updatePeers_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task sendMessage_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp8 = new InternalStructs.sendMessage_args();
        await tmp8.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp9 = new InternalStructs.sendMessage_result();
        try
        {
          tmp9.Success = await _iAsync.sendMessage(tmp8.Username, tmp8.Message, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("sendMessage", TMessageType.Reply, seqid), cancellationToken); 
          await tmp9.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp10)
        {
          var tmp11 = $"Error occurred in {GetType().FullName}: {tmp10.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp10, tmp11);
          else
            Console.Error.WriteLine(tmp11);
          var tmp12 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("sendMessage", TMessageType.Exception, seqid), cancellationToken);
          await tmp12.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task updatePeers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp13 = new InternalStructs.updatePeers_args();
        await tmp13.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp14 = new InternalStructs.updatePeers_result();
        try
        {
          tmp14.Success = await _iAsync.updatePeers(tmp13.Peers, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("updatePeers", TMessageType.Reply, seqid), cancellationToken); 
          await tmp14.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp15)
        {
          var tmp16 = $"Error occurred in {GetType().FullName}: {tmp15.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp15, tmp16);
          else
            Console.Error.WriteLine(tmp16);
          var tmp17 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("updatePeers", TMessageType.Exception, seqid), cancellationToken);
          await tmp17.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class sendMessage_args : TBase
      {
        private string _username;
        private string _message;

        public string Username
        {
          get
          {
            return _username;
          }
          set
          {
            __isset.@username = true;
            this._username = value;
          }
        }

        public string Message
        {
          get
          {
            return _message;
          }
          set
          {
            __isset.@message = true;
            this._message = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @username;
          public bool @message;
        }

        public sendMessage_args()
        {
        }

        public sendMessage_args DeepCopy() {
          var tmp18 = new sendMessage_args();
          if((Username != null) && __isset.@username)
          {
            tmp18.Username = this.Username;
          }
          tmp18.__isset.@username = this.__isset.@username;
          if((Message != null) && __isset.@message)
          {
            tmp18.Message = this.Message;
          }
          tmp18.__isset.@message = this.__isset.@message;
          return tmp18;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Username = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.String)
                  {
                    Message = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp19 = new TStruct("sendMessage_args");
            await oprot.WriteStructBeginAsync(tmp19, cancellationToken);
            var tmp20 = new TField();
            if((Username != null) && __isset.@username)
            {
              tmp20.Name = "username";
              tmp20.Type = TType.String;
              tmp20.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
              await oprot.WriteStringAsync(Username, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Message != null) && __isset.@message)
            {
              tmp20.Name = "message";
              tmp20.Type = TType.String;
              tmp20.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp20, cancellationToken);
              await oprot.WriteStringAsync(Message, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is sendMessage_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@username == other.__isset.@username) && ((!__isset.@username) || (global::System.Object.Equals(Username, other.Username))))
            && ((__isset.@message == other.__isset.@message) && ((!__isset.@message) || (global::System.Object.Equals(Message, other.Message))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Username != null) && __isset.@username)
            {
              hashcode = (hashcode * 397) + Username.GetHashCode();
            }
            if((Message != null) && __isset.@message)
            {
              hashcode = (hashcode * 397) + Message.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp21 = new StringBuilder("sendMessage_args(");
          int tmp22 = 0;
          if((Username != null) && __isset.@username)
          {
            if(0 < tmp22++) { tmp21.Append(", "); }
            tmp21.Append("Username: ");
            Username.ToString(tmp21);
          }
          if((Message != null) && __isset.@message)
          {
            if(0 < tmp22++) { tmp21.Append(", "); }
            tmp21.Append("Message: ");
            Message.ToString(tmp21);
          }
          tmp21.Append(')');
          return tmp21.ToString();
        }
      }


      public partial class sendMessage_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public sendMessage_result()
        {
        }

        public sendMessage_result DeepCopy() {
          var tmp23 = new sendMessage_result();
          if(__isset.@success)
          {
            tmp23.Success = this.Success;
          }
          tmp23.__isset.@success = this.__isset.@success;
          return tmp23;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp24 = new TStruct("sendMessage_result");
            await oprot.WriteStructBeginAsync(tmp24, cancellationToken);
            var tmp25 = new TField();

            if(this.__isset.@success)
            {
              tmp25.Name = "Success";
              tmp25.Type = TType.Bool;
              tmp25.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp25, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is sendMessage_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp26 = new StringBuilder("sendMessage_result(");
          int tmp27 = 0;
          if(__isset.@success)
          {
            if(0 < tmp27++) { tmp26.Append(", "); }
            tmp26.Append("Success: ");
            Success.ToString(tmp26);
          }
          tmp26.Append(')');
          return tmp26.ToString();
        }
      }


      public partial class updatePeers_args : TBase
      {
        private List<global::P2PChatSystem.Model.TPeer> _peers;

        public List<global::P2PChatSystem.Model.TPeer> Peers
        {
          get
          {
            return _peers;
          }
          set
          {
            __isset.@peers = true;
            this._peers = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @peers;
        }

        public updatePeers_args()
        {
        }

        public updatePeers_args DeepCopy() {
          var tmp28 = new updatePeers_args();
          if((Peers != null) && __isset.@peers)
          {
            tmp28.Peers = this.Peers.DeepCopy();
          }
          tmp28.__isset.@peers = this.__isset.@peers;
          return tmp28;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list29 = await iprot.ReadListBeginAsync(cancellationToken);
                      Peers = new List<global::P2PChatSystem.Model.TPeer>(_list29.Count);
                      for(int _i30 = 0; _i30 < _list29.Count; ++_i30)
                      {
                        global::P2PChatSystem.Model.TPeer _elem31;
                        _elem31 = new global::P2PChatSystem.Model.TPeer();
                        await _elem31.ReadAsync(iprot, cancellationToken);
                        Peers.Add(_elem31);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp32 = new TStruct("updatePeers_args");
            await oprot.WriteStructBeginAsync(tmp32, cancellationToken);
            var tmp33 = new TField();
            if((Peers != null) && __isset.@peers)
            {
              tmp33.Name = "peers";
              tmp33.Type = TType.List;
              tmp33.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp33, cancellationToken);
              await oprot.WriteListBeginAsync(new TList(TType.Struct, Peers.Count), cancellationToken);
              foreach (global::P2PChatSystem.Model.TPeer _iter34 in Peers)
              {
                await _iter34.WriteAsync(oprot, cancellationToken);
              }
              await oprot.WriteListEndAsync(cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updatePeers_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@peers == other.__isset.@peers) && ((!__isset.@peers) || (TCollections.Equals(Peers, other.Peers))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Peers != null) && __isset.@peers)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Peers);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp35 = new StringBuilder("updatePeers_args(");
          int tmp36 = 0;
          if((Peers != null) && __isset.@peers)
          {
            if(0 < tmp36++) { tmp35.Append(", "); }
            tmp35.Append("Peers: ");
            Peers.ToString(tmp35);
          }
          tmp35.Append(')');
          return tmp35.ToString();
        }
      }


      public partial class updatePeers_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public updatePeers_result()
        {
        }

        public updatePeers_result DeepCopy() {
          var tmp37 = new updatePeers_result();
          if(__isset.@success)
          {
            tmp37.Success = this.Success;
          }
          tmp37.__isset.@success = this.__isset.@success;
          return tmp37;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp38 = new TStruct("updatePeers_result");
            await oprot.WriteStructBeginAsync(tmp38, cancellationToken);
            var tmp39 = new TField();

            if(this.__isset.@success)
            {
              tmp39.Name = "Success";
              tmp39.Type = TType.Bool;
              tmp39.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp39, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is updatePeers_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp40 = new StringBuilder("updatePeers_result(");
          int tmp41 = 0;
          if(__isset.@success)
          {
            if(0 < tmp41++) { tmp40.Append(", "); }
            tmp40.Append("Success: ");
            Success.ToString(tmp40);
          }
          tmp40.Append(')');
          return tmp40.ToString();
        }
      }

    }

  }
}
