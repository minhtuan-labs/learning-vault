/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace P2PChatSystem.Model
{

  public partial class TPeer : TBase
  {
    private string _host;
    private int _port;
    private string _username;

    public string Host
    {
      get
      {
        return _host;
      }
      set
      {
        __isset.@host = true;
        this._host = value;
      }
    }

    public int Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.@port = true;
        this._port = value;
      }
    }

    public string Username
    {
      get
      {
        return _username;
      }
      set
      {
        __isset.@username = true;
        this._username = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool @host;
      public bool @port;
      public bool @username;
    }

    public TPeer()
    {
    }

    public TPeer DeepCopy() {
      var tmp0 = new TPeer();
      if((Host != null) && __isset.@host)
      {
        tmp0.Host = this.Host;
      }
      tmp0.__isset.@host = this.__isset.@host;
      if(__isset.@port)
      {
        tmp0.Port = this.Port;
      }
      tmp0.__isset.@port = this.__isset.@port;
      if((Username != null) && __isset.@username)
      {
        tmp0.Username = this.Username;
      }
      tmp0.__isset.@username = this.__isset.@username;
      return tmp0;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Host = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.I32)
              {
                Port = await iprot.ReadI32Async(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.String)
              {
                Username = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var tmp1 = new TStruct("TPeer");
        await oprot.WriteStructBeginAsync(tmp1, cancellationToken);
        var tmp2 = new TField();
        if((Host != null) && __isset.@host)
        {
          tmp2.Name = "host";
          tmp2.Type = TType.String;
          tmp2.ID = 1;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteStringAsync(Host, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if(__isset.@port)
        {
          tmp2.Name = "port";
          tmp2.Type = TType.I32;
          tmp2.ID = 2;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteI32Async(Port, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Username != null) && __isset.@username)
        {
          tmp2.Name = "username";
          tmp2.Type = TType.String;
          tmp2.ID = 3;
          await oprot.WriteFieldBeginAsync(tmp2, cancellationToken);
          await oprot.WriteStringAsync(Username, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is TPeer other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.@host == other.__isset.@host) && ((!__isset.@host) || (global::System.Object.Equals(Host, other.Host))))
        && ((__isset.@port == other.__isset.@port) && ((!__isset.@port) || (global::System.Object.Equals(Port, other.Port))))
        && ((__isset.@username == other.__isset.@username) && ((!__isset.@username) || (global::System.Object.Equals(Username, other.Username))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Host != null) && __isset.@host)
        {
          hashcode = (hashcode * 397) + Host.GetHashCode();
        }
        if(__isset.@port)
        {
          hashcode = (hashcode * 397) + Port.GetHashCode();
        }
        if((Username != null) && __isset.@username)
        {
          hashcode = (hashcode * 397) + Username.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var tmp3 = new StringBuilder("TPeer(");
      int tmp4 = 0;
      if((Host != null) && __isset.@host)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Host: ");
        Host.ToString(tmp3);
      }
      if(__isset.@port)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Port: ");
        Port.ToString(tmp3);
      }
      if((Username != null) && __isset.@username)
      {
        if(0 < tmp4++) { tmp3.Append(", "); }
        tmp3.Append("Username: ");
        Username.ToString(tmp3);
      }
      tmp3.Append(')');
      return tmp3.ToString();
    }
  }

}
