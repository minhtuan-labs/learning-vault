/**
 * <auto-generated>
 * Autogenerated by Thrift Compiler (0.20.0)
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 * </auto-generated>
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE0017  // object init can be simplified
#pragma warning disable IDE0028  // collection init can be simplified
#pragma warning disable IDE1006  // parts of the code use IDL spelling
#pragma warning disable CA1822   // empty DeepCopy() methods still non-static
#pragma warning disable IDE0083  // pattern matching "that is not SomeType" requires net5.0 but we still support earlier versions

namespace P2PChatSystem.BootstrapService
{
  public partial class TBootstrapService
  {
    public interface IAsync
    {
      global::System.Threading.Tasks.Task<bool> registerPeer(string @host, int @port, string @username, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<List<global::P2PChatSystem.Model.TPeer>> getAllPeers(CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> @quit(string @username, CancellationToken cancellationToken = default);

      global::System.Threading.Tasks.Task<bool> notifyDisconnectedPeer(string @username, CancellationToken cancellationToken = default);

    }


    public class Client : TBaseClient, IDisposable, IAsync
    {
      public Client(TProtocol protocol) : this(protocol, protocol)
      {
      }

      public Client(TProtocol inputProtocol, TProtocol outputProtocol) : base(inputProtocol, outputProtocol)
      {
      }

      public async global::System.Threading.Tasks.Task<bool> registerPeer(string @host, int @port, string @username, CancellationToken cancellationToken = default)
      {
        await send_registerPeer(@host, @port, @username, cancellationToken);
        return await recv_registerPeer(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_registerPeer(string @host, int @port, string @username, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("registerPeer", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp0 = new InternalStructs.registerPeer_args() {
          Host = @host,
          Port = @port,
          Username = @username,
        };
        
        await tmp0.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_registerPeer(CancellationToken cancellationToken = default)
      {
        
        var tmp1 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp1.Type == TMessageType.Exception)
        {
          var tmp2 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp2;
        }

        var tmp3 = new InternalStructs.registerPeer_result();
        await tmp3.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp3.__isset.success)
        {
          return tmp3.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerPeer failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<List<global::P2PChatSystem.Model.TPeer>> getAllPeers(CancellationToken cancellationToken = default)
      {
        await send_getAllPeers(cancellationToken);
        return await recv_getAllPeers(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_getAllPeers(CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("getAllPeers", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp4 = new InternalStructs.getAllPeers_args() {
        };
        
        await tmp4.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<List<global::P2PChatSystem.Model.TPeer>> recv_getAllPeers(CancellationToken cancellationToken = default)
      {
        
        var tmp5 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp5.Type == TMessageType.Exception)
        {
          var tmp6 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp6;
        }

        var tmp7 = new InternalStructs.getAllPeers_result();
        await tmp7.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp7.__isset.success)
        {
          return tmp7.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllPeers failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> @quit(string @username, CancellationToken cancellationToken = default)
      {
        await send_quit(@username, cancellationToken);
        return await recv_quit(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_quit(string @username, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("quit", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp8 = new InternalStructs.quit_args() {
          Username = @username,
        };
        
        await tmp8.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_quit(CancellationToken cancellationToken = default)
      {
        
        var tmp9 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp9.Type == TMessageType.Exception)
        {
          var tmp10 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp10;
        }

        var tmp11 = new InternalStructs.quit_result();
        await tmp11.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp11.__isset.success)
        {
          return tmp11.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "quit failed: unknown result");
      }

      public async global::System.Threading.Tasks.Task<bool> notifyDisconnectedPeer(string @username, CancellationToken cancellationToken = default)
      {
        await send_notifyDisconnectedPeer(@username, cancellationToken);
        return await recv_notifyDisconnectedPeer(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task send_notifyDisconnectedPeer(string @username, CancellationToken cancellationToken = default)
      {
        await OutputProtocol.WriteMessageBeginAsync(new TMessage("notifyDisconnectedPeer", TMessageType.Call, SeqId), cancellationToken);
        
        var tmp12 = new InternalStructs.notifyDisconnectedPeer_args() {
          Username = @username,
        };
        
        await tmp12.WriteAsync(OutputProtocol, cancellationToken);
        await OutputProtocol.WriteMessageEndAsync(cancellationToken);
        await OutputProtocol.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task<bool> recv_notifyDisconnectedPeer(CancellationToken cancellationToken = default)
      {
        
        var tmp13 = await InputProtocol.ReadMessageBeginAsync(cancellationToken);
        if (tmp13.Type == TMessageType.Exception)
        {
          var tmp14 = await TApplicationException.ReadAsync(InputProtocol, cancellationToken);
          await InputProtocol.ReadMessageEndAsync(cancellationToken);
          throw tmp14;
        }

        var tmp15 = new InternalStructs.notifyDisconnectedPeer_result();
        await tmp15.ReadAsync(InputProtocol, cancellationToken);
        await InputProtocol.ReadMessageEndAsync(cancellationToken);
        if (tmp15.__isset.success)
        {
          return tmp15.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "notifyDisconnectedPeer failed: unknown result");
      }

    }

    public class AsyncProcessor : ITAsyncProcessor
    {
      private readonly IAsync _iAsync;
      private readonly ILogger<AsyncProcessor> _logger;

      public AsyncProcessor(IAsync iAsync, ILogger<AsyncProcessor> logger = default)
      {
        _iAsync = iAsync ?? throw new ArgumentNullException(nameof(iAsync));
        _logger = logger;
        processMap_["registerPeer"] = registerPeer_ProcessAsync;
        processMap_["getAllPeers"] = getAllPeers_ProcessAsync;
        processMap_["quit"] = quit_ProcessAsync;
        processMap_["notifyDisconnectedPeer"] = notifyDisconnectedPeer_ProcessAsync;
      }

      protected delegate global::System.Threading.Tasks.Task ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken);
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot)
      {
        return await ProcessAsync(iprot, oprot, CancellationToken.None);
      }

      public async Task<bool> ProcessAsync(TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        try
        {
          var msg = await iprot.ReadMessageBeginAsync(cancellationToken);

          processMap_.TryGetValue(msg.Name, out var fn);

          if (fn == null)
          {
            await TProtocolUtil.SkipAsync(iprot, TType.Struct, cancellationToken);
            await iprot.ReadMessageEndAsync(cancellationToken);
            var x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            await oprot.WriteMessageBeginAsync(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID), cancellationToken);
            await x.WriteAsync(oprot, cancellationToken);
            await oprot.WriteMessageEndAsync(cancellationToken);
            await oprot.Transport.FlushAsync(cancellationToken);
            return true;
          }

          await fn(msg.SeqID, iprot, oprot, cancellationToken);

        }
        catch (IOException)
        {
          return false;
        }

        return true;
      }

      public async global::System.Threading.Tasks.Task registerPeer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp16 = new InternalStructs.registerPeer_args();
        await tmp16.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp17 = new InternalStructs.registerPeer_result();
        try
        {
          tmp17.Success = await _iAsync.registerPeer(tmp16.Host, tmp16.Port, tmp16.Username, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("registerPeer", TMessageType.Reply, seqid), cancellationToken); 
          await tmp17.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp18)
        {
          var tmp19 = $"Error occurred in {GetType().FullName}: {tmp18.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp18, tmp19);
          else
            Console.Error.WriteLine(tmp19);
          var tmp20 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("registerPeer", TMessageType.Exception, seqid), cancellationToken);
          await tmp20.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task getAllPeers_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp21 = new InternalStructs.getAllPeers_args();
        await tmp21.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp22 = new InternalStructs.getAllPeers_result();
        try
        {
          tmp22.Success = await _iAsync.getAllPeers(cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("getAllPeers", TMessageType.Reply, seqid), cancellationToken); 
          await tmp22.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp23)
        {
          var tmp24 = $"Error occurred in {GetType().FullName}: {tmp23.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp23, tmp24);
          else
            Console.Error.WriteLine(tmp24);
          var tmp25 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("getAllPeers", TMessageType.Exception, seqid), cancellationToken);
          await tmp25.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task quit_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp26 = new InternalStructs.quit_args();
        await tmp26.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp27 = new InternalStructs.quit_result();
        try
        {
          tmp27.Success = await _iAsync.@quit(tmp26.Username, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("quit", TMessageType.Reply, seqid), cancellationToken); 
          await tmp27.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp28)
        {
          var tmp29 = $"Error occurred in {GetType().FullName}: {tmp28.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp28, tmp29);
          else
            Console.Error.WriteLine(tmp29);
          var tmp30 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("quit", TMessageType.Exception, seqid), cancellationToken);
          await tmp30.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

      public async global::System.Threading.Tasks.Task notifyDisconnectedPeer_ProcessAsync(int seqid, TProtocol iprot, TProtocol oprot, CancellationToken cancellationToken)
      {
        var tmp31 = new InternalStructs.notifyDisconnectedPeer_args();
        await tmp31.ReadAsync(iprot, cancellationToken);
        await iprot.ReadMessageEndAsync(cancellationToken);
        var tmp32 = new InternalStructs.notifyDisconnectedPeer_result();
        try
        {
          tmp32.Success = await _iAsync.notifyDisconnectedPeer(tmp31.Username, cancellationToken);
          await oprot.WriteMessageBeginAsync(new TMessage("notifyDisconnectedPeer", TMessageType.Reply, seqid), cancellationToken); 
          await tmp32.WriteAsync(oprot, cancellationToken);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception tmp33)
        {
          var tmp34 = $"Error occurred in {GetType().FullName}: {tmp33.Message}";
          if(_logger != null)
            _logger.LogError("{Exception}, {Message}", tmp33, tmp34);
          else
            Console.Error.WriteLine(tmp34);
          var tmp35 = new TApplicationException(TApplicationException.ExceptionType.InternalError," Internal error.");
          await oprot.WriteMessageBeginAsync(new TMessage("notifyDisconnectedPeer", TMessageType.Exception, seqid), cancellationToken);
          await tmp35.WriteAsync(oprot, cancellationToken);
        }
        await oprot.WriteMessageEndAsync(cancellationToken);
        await oprot.Transport.FlushAsync(cancellationToken);
      }

    }

    public class InternalStructs
    {

      public partial class registerPeer_args : TBase
      {
        private string _host;
        private int _port;
        private string _username;

        public string Host
        {
          get
          {
            return _host;
          }
          set
          {
            __isset.@host = true;
            this._host = value;
          }
        }

        public int Port
        {
          get
          {
            return _port;
          }
          set
          {
            __isset.@port = true;
            this._port = value;
          }
        }

        public string Username
        {
          get
          {
            return _username;
          }
          set
          {
            __isset.@username = true;
            this._username = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @host;
          public bool @port;
          public bool @username;
        }

        public registerPeer_args()
        {
        }

        public registerPeer_args DeepCopy() {
          var tmp36 = new registerPeer_args();
          if((Host != null) && __isset.@host)
          {
            tmp36.Host = this.Host;
          }
          tmp36.__isset.@host = this.__isset.@host;
          if(__isset.@port)
          {
            tmp36.Port = this.Port;
          }
          tmp36.__isset.@port = this.__isset.@port;
          if((Username != null) && __isset.@username)
          {
            tmp36.Username = this.Username;
          }
          tmp36.__isset.@username = this.__isset.@username;
          return tmp36;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Host = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 2:
                  if (field.Type == TType.I32)
                  {
                    Port = await iprot.ReadI32Async(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                case 3:
                  if (field.Type == TType.String)
                  {
                    Username = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp37 = new TStruct("registerPeer_args");
            await oprot.WriteStructBeginAsync(tmp37, cancellationToken);
            var tmp38 = new TField();
            if((Host != null) && __isset.@host)
            {
              tmp38.Name = "host";
              tmp38.Type = TType.String;
              tmp38.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
              await oprot.WriteStringAsync(Host, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if(__isset.@port)
            {
              tmp38.Name = "port";
              tmp38.Type = TType.I32;
              tmp38.ID = 2;
              await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
              await oprot.WriteI32Async(Port, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            if((Username != null) && __isset.@username)
            {
              tmp38.Name = "username";
              tmp38.Type = TType.String;
              tmp38.ID = 3;
              await oprot.WriteFieldBeginAsync(tmp38, cancellationToken);
              await oprot.WriteStringAsync(Username, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerPeer_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@host == other.__isset.@host) && ((!__isset.@host) || (global::System.Object.Equals(Host, other.Host))))
            && ((__isset.@port == other.__isset.@port) && ((!__isset.@port) || (global::System.Object.Equals(Port, other.Port))))
            && ((__isset.@username == other.__isset.@username) && ((!__isset.@username) || (global::System.Object.Equals(Username, other.Username))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Host != null) && __isset.@host)
            {
              hashcode = (hashcode * 397) + Host.GetHashCode();
            }
            if(__isset.@port)
            {
              hashcode = (hashcode * 397) + Port.GetHashCode();
            }
            if((Username != null) && __isset.@username)
            {
              hashcode = (hashcode * 397) + Username.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp39 = new StringBuilder("registerPeer_args(");
          int tmp40 = 0;
          if((Host != null) && __isset.@host)
          {
            if(0 < tmp40++) { tmp39.Append(", "); }
            tmp39.Append("Host: ");
            Host.ToString(tmp39);
          }
          if(__isset.@port)
          {
            if(0 < tmp40++) { tmp39.Append(", "); }
            tmp39.Append("Port: ");
            Port.ToString(tmp39);
          }
          if((Username != null) && __isset.@username)
          {
            if(0 < tmp40++) { tmp39.Append(", "); }
            tmp39.Append("Username: ");
            Username.ToString(tmp39);
          }
          tmp39.Append(')');
          return tmp39.ToString();
        }
      }


      public partial class registerPeer_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public registerPeer_result()
        {
        }

        public registerPeer_result DeepCopy() {
          var tmp41 = new registerPeer_result();
          if(__isset.@success)
          {
            tmp41.Success = this.Success;
          }
          tmp41.__isset.@success = this.__isset.@success;
          return tmp41;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp42 = new TStruct("registerPeer_result");
            await oprot.WriteStructBeginAsync(tmp42, cancellationToken);
            var tmp43 = new TField();

            if(this.__isset.@success)
            {
              tmp43.Name = "Success";
              tmp43.Type = TType.Bool;
              tmp43.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp43, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is registerPeer_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp44 = new StringBuilder("registerPeer_result(");
          int tmp45 = 0;
          if(__isset.@success)
          {
            if(0 < tmp45++) { tmp44.Append(", "); }
            tmp44.Append("Success: ");
            Success.ToString(tmp44);
          }
          tmp44.Append(')');
          return tmp44.ToString();
        }
      }


      public partial class getAllPeers_args : TBase
      {

        public getAllPeers_args()
        {
        }

        public getAllPeers_args DeepCopy() {
          var tmp46 = new getAllPeers_args();
          return tmp46;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp47 = new TStruct("getAllPeers_args");
            await oprot.WriteStructBeginAsync(tmp47, cancellationToken);
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getAllPeers_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return true;
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp48 = new StringBuilder("getAllPeers_args(");
          tmp48.Append(')');
          return tmp48.ToString();
        }
      }


      public partial class getAllPeers_result : TBase
      {
        private List<global::P2PChatSystem.Model.TPeer> _success;

        public List<global::P2PChatSystem.Model.TPeer> Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public getAllPeers_result()
        {
        }

        public getAllPeers_result DeepCopy() {
          var tmp50 = new getAllPeers_result();
          if((Success != null) && __isset.@success)
          {
            tmp50.Success = this.Success.DeepCopy();
          }
          tmp50.__isset.@success = this.__isset.@success;
          return tmp50;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.List)
                  {
                    {
                      var _list51 = await iprot.ReadListBeginAsync(cancellationToken);
                      Success = new List<global::P2PChatSystem.Model.TPeer>(_list51.Count);
                      for(int _i52 = 0; _i52 < _list51.Count; ++_i52)
                      {
                        global::P2PChatSystem.Model.TPeer _elem53;
                        _elem53 = new global::P2PChatSystem.Model.TPeer();
                        await _elem53.ReadAsync(iprot, cancellationToken);
                        Success.Add(_elem53);
                      }
                      await iprot.ReadListEndAsync(cancellationToken);
                    }
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp54 = new TStruct("getAllPeers_result");
            await oprot.WriteStructBeginAsync(tmp54, cancellationToken);
            var tmp55 = new TField();

            if(this.__isset.@success)
            {
              if (Success != null)
              {
                tmp55.Name = "Success";
                tmp55.Type = TType.List;
                tmp55.ID = 0;
                await oprot.WriteFieldBeginAsync(tmp55, cancellationToken);
                await oprot.WriteListBeginAsync(new TList(TType.Struct, Success.Count), cancellationToken);
                foreach (global::P2PChatSystem.Model.TPeer _iter56 in Success)
                {
                  await _iter56.WriteAsync(oprot, cancellationToken);
                }
                await oprot.WriteListEndAsync(cancellationToken);
                await oprot.WriteFieldEndAsync(cancellationToken);
              }
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is getAllPeers_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (TCollections.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Success != null) && __isset.@success)
            {
              hashcode = (hashcode * 397) + TCollections.GetHashCode(Success);
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp57 = new StringBuilder("getAllPeers_result(");
          int tmp58 = 0;
          if((Success != null) && __isset.@success)
          {
            if(0 < tmp58++) { tmp57.Append(", "); }
            tmp57.Append("Success: ");
            Success.ToString(tmp57);
          }
          tmp57.Append(')');
          return tmp57.ToString();
        }
      }


      public partial class quit_args : TBase
      {
        private string _username;

        public string Username
        {
          get
          {
            return _username;
          }
          set
          {
            __isset.@username = true;
            this._username = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @username;
        }

        public quit_args()
        {
        }

        public quit_args DeepCopy() {
          var tmp59 = new quit_args();
          if((Username != null) && __isset.@username)
          {
            tmp59.Username = this.Username;
          }
          tmp59.__isset.@username = this.__isset.@username;
          return tmp59;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Username = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp60 = new TStruct("quit_args");
            await oprot.WriteStructBeginAsync(tmp60, cancellationToken);
            var tmp61 = new TField();
            if((Username != null) && __isset.@username)
            {
              tmp61.Name = "username";
              tmp61.Type = TType.String;
              tmp61.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp61, cancellationToken);
              await oprot.WriteStringAsync(Username, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is quit_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@username == other.__isset.@username) && ((!__isset.@username) || (global::System.Object.Equals(Username, other.Username))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Username != null) && __isset.@username)
            {
              hashcode = (hashcode * 397) + Username.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp62 = new StringBuilder("quit_args(");
          int tmp63 = 0;
          if((Username != null) && __isset.@username)
          {
            if(0 < tmp63++) { tmp62.Append(", "); }
            tmp62.Append("Username: ");
            Username.ToString(tmp62);
          }
          tmp62.Append(')');
          return tmp62.ToString();
        }
      }


      public partial class quit_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public quit_result()
        {
        }

        public quit_result DeepCopy() {
          var tmp64 = new quit_result();
          if(__isset.@success)
          {
            tmp64.Success = this.Success;
          }
          tmp64.__isset.@success = this.__isset.@success;
          return tmp64;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp65 = new TStruct("quit_result");
            await oprot.WriteStructBeginAsync(tmp65, cancellationToken);
            var tmp66 = new TField();

            if(this.__isset.@success)
            {
              tmp66.Name = "Success";
              tmp66.Type = TType.Bool;
              tmp66.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp66, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is quit_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp67 = new StringBuilder("quit_result(");
          int tmp68 = 0;
          if(__isset.@success)
          {
            if(0 < tmp68++) { tmp67.Append(", "); }
            tmp67.Append("Success: ");
            Success.ToString(tmp67);
          }
          tmp67.Append(')');
          return tmp67.ToString();
        }
      }


      public partial class notifyDisconnectedPeer_args : TBase
      {
        private string _username;

        public string Username
        {
          get
          {
            return _username;
          }
          set
          {
            __isset.@username = true;
            this._username = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @username;
        }

        public notifyDisconnectedPeer_args()
        {
        }

        public notifyDisconnectedPeer_args DeepCopy() {
          var tmp69 = new notifyDisconnectedPeer_args();
          if((Username != null) && __isset.@username)
          {
            tmp69.Username = this.Username;
          }
          tmp69.__isset.@username = this.__isset.@username;
          return tmp69;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 1:
                  if (field.Type == TType.String)
                  {
                    Username = await iprot.ReadStringAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp70 = new TStruct("notifyDisconnectedPeer_args");
            await oprot.WriteStructBeginAsync(tmp70, cancellationToken);
            var tmp71 = new TField();
            if((Username != null) && __isset.@username)
            {
              tmp71.Name = "username";
              tmp71.Type = TType.String;
              tmp71.ID = 1;
              await oprot.WriteFieldBeginAsync(tmp71, cancellationToken);
              await oprot.WriteStringAsync(Username, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is notifyDisconnectedPeer_args other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@username == other.__isset.@username) && ((!__isset.@username) || (global::System.Object.Equals(Username, other.Username))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if((Username != null) && __isset.@username)
            {
              hashcode = (hashcode * 397) + Username.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp72 = new StringBuilder("notifyDisconnectedPeer_args(");
          int tmp73 = 0;
          if((Username != null) && __isset.@username)
          {
            if(0 < tmp73++) { tmp72.Append(", "); }
            tmp72.Append("Username: ");
            Username.ToString(tmp72);
          }
          tmp72.Append(')');
          return tmp72.ToString();
        }
      }


      public partial class notifyDisconnectedPeer_result : TBase
      {
        private bool _success;

        public bool Success
        {
          get
          {
            return _success;
          }
          set
          {
            __isset.@success = true;
            this._success = value;
          }
        }


        public Isset __isset;
        public struct Isset
        {
          public bool @success;
        }

        public notifyDisconnectedPeer_result()
        {
        }

        public notifyDisconnectedPeer_result DeepCopy() {
          var tmp74 = new notifyDisconnectedPeer_result();
          if(__isset.@success)
          {
            tmp74.Success = this.Success;
          }
          tmp74.__isset.@success = this.__isset.@success;
          return tmp74;
        }

        public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
        {
          iprot.IncrementRecursionDepth();
          try
          {
            TField field;
            await iprot.ReadStructBeginAsync(cancellationToken);
            while (true)
            {
              field = await iprot.ReadFieldBeginAsync(cancellationToken);
              if (field.Type == TType.Stop)
              {
                break;
              }

              switch (field.ID)
              {
                case 0:
                  if (field.Type == TType.Bool)
                  {
                    Success = await iprot.ReadBoolAsync(cancellationToken);
                  }
                  else
                  {
                    await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  }
                  break;
                default: 
                  await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
                  break;
              }

              await iprot.ReadFieldEndAsync(cancellationToken);
            }

            await iprot.ReadStructEndAsync(cancellationToken);
          }
          finally
          {
            iprot.DecrementRecursionDepth();
          }
        }

        public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
        {
          oprot.IncrementRecursionDepth();
          try
          {
            var tmp75 = new TStruct("notifyDisconnectedPeer_result");
            await oprot.WriteStructBeginAsync(tmp75, cancellationToken);
            var tmp76 = new TField();

            if(this.__isset.@success)
            {
              tmp76.Name = "Success";
              tmp76.Type = TType.Bool;
              tmp76.ID = 0;
              await oprot.WriteFieldBeginAsync(tmp76, cancellationToken);
              await oprot.WriteBoolAsync(Success, cancellationToken);
              await oprot.WriteFieldEndAsync(cancellationToken);
            }
            await oprot.WriteFieldStopAsync(cancellationToken);
            await oprot.WriteStructEndAsync(cancellationToken);
          }
          finally
          {
            oprot.DecrementRecursionDepth();
          }
        }

        public override bool Equals(object that)
        {
          if (!(that is notifyDisconnectedPeer_result other)) return false;
          if (ReferenceEquals(this, other)) return true;
          return ((__isset.@success == other.__isset.@success) && ((!__isset.@success) || (global::System.Object.Equals(Success, other.Success))));
        }

        public override int GetHashCode() {
          int hashcode = 157;
          unchecked {
            if(__isset.@success)
            {
              hashcode = (hashcode * 397) + Success.GetHashCode();
            }
          }
          return hashcode;
        }

        public override string ToString()
        {
          var tmp77 = new StringBuilder("notifyDisconnectedPeer_result(");
          int tmp78 = 0;
          if(__isset.@success)
          {
            if(0 < tmp78++) { tmp77.Append(", "); }
            tmp77.Append("Success: ");
            Success.ToString(tmp77);
          }
          tmp77.Append(')');
          return tmp77.ToString();
        }
      }

    }

  }
}
